rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAdmin() {
      return request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isFaculty() {
      return request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'faculty';
    }

    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Main Collections
    
    // Users Collection
    // WARNING: User documents are publicly readable to allow server-side rendering
    // to function. This is a temporary solution to fix a permissions error.
    // The recommended long-term solution is to use the Firebase Admin SDK on the server,
    // which securely bypasses security rules for admin operations.
    match /users/{userId} {
      allow read: if true;
      allow create: if isAuthenticated();
      // Users can update their own data. Faculty/Admins can also update.
      // Users cannot change their own role.
      allow update: if (isOwner(userId) && !('role' in request.resource.data)) || isFaculty() || isAdmin();
      allow delete: if isAdmin();
    }

    // Events Collection
    match /events/{eventId} {
      // Events are public for the home page.
      allow read: if true;
      allow create, update: if isFaculty();
      allow delete: if isFaculty();
    }

    // Clubs Collection
    match /clubs/{clubId} {
      allow read: if true;
      allow write: if isFaculty();
    }

    // Event Requests collection
    match /eventRequests/{requestId} {
      // Made readable by anyone to allow server-side rendering by unauthenticated server.
      // A better long-term solution is to use the Firebase Admin SDK.
      allow read: if true;
      // Allow any authenticated user to create a request. UI logic restricts this further.
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (resource.data.createdBy == request.auth.uid || isFaculty());
      allow delete: if false;
    }
    
    // Timetables collection
    match /timetables/{timetableId} {
      allow read: if isAuthenticated();
      allow write: if isFaculty();
    }

    // Other collections
    match /media/{mediaId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && resource.data.uploader == request.auth.uid;
      allow delete: if request.auth != null && 
                     (resource.data.uploader == request.auth.uid || isAdmin());
    }
    
    match /organizer_requests/{requestId} {
      allow read: if request.auth != null && 
                   (resource.data.userId == request.auth.uid || isAdmin() || isFaculty());
      allow create: if request.auth != null;
      allow update: if request.auth != null && (isAdmin() || isFaculty());
      allow delete: if isAdmin();
    }

    match /club_members/{memberId} {
      allow read: if isAuthenticated();
      allow write: if isFaculty();
    }

    match /club_leads/{leadId} {
      allow read: if isAuthenticated();
      allow write: if isFaculty();
    }

    match /academicSchedules/{scheduleId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isFaculty();
    }
    
    match /eventAvailability/{dateId} {
      allow read: if isAuthenticated();
      allow write: if isFaculty();
    }
  }
}

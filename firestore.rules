rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAdmin() {
      return request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isFaculty() {
      return request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'faculty';
    }

    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Main Collections
    
    // Users Collection
    match /users/{userId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if (isOwner(userId) && !('role' in request.resource.data)) || isFaculty() || isAdmin();
      allow delete: if isAdmin();
    }

    // Events Collection
    match /events/{eventId} {
      allow read: if true;
      allow create, update: if isFaculty();
      allow delete: if isFaculty();
    }

    // Clubs Collection
    match /clubs/{clubId} {
      allow read: if true;
      allow create, delete: if isFaculty();
      // Allow faculty to update anything.
      // Allow a club lead to update specific fields of their own club.
      // This rule ensures that every key in the request is one of the allowed keys.
      allow update: if isFaculty() || (
        isAuthenticated() &&
        resource.data.leadId == request.auth.uid &&
        request.resource.data.keys().hasAll(['name', 'description', 'image', 'socialLinks', 'gallery', 'googleDriveFolderId', 'updatedAt'])
      );
    }


    // Event Requests collection
    match /eventRequests/{requestId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (resource.data.createdBy == request.auth.uid || isFaculty());
      allow delete: if false;
    }
    
    // Timetables collection
    match /timetables/{timetableId} {
      allow read: if isAuthenticated();
      allow write: if isFaculty();
    }

    // Seminar Bookings collection
    match /seminarBookings/{bookingId} {
      allow read: if isAuthenticated();
      allow write: if isFaculty();
    }
  }
}


rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAdmin() {
      return request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isFaculty() {
      return request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'faculty';
    }

    function isAuthenticated() {
      return request.auth.uid != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Main Collections
    
    // Users Collection
    match /users/{userId} {
      allow read: if true;
      // Allow user creation for anyone, as this is handled by the secure
      // invitation flow and Firebase Auth user creation.
      allow create: if true;
      // Allow update if the user is the owner and is NOT trying to change their role,
      // OR if the user is faculty/admin.
      allow update: if (
        isOwner(userId) && 
        !(request.resource.data.role != resource.data.role)
      ) || isFaculty() || isAdmin();
      allow delete: if isAdmin();
    }

    // Events Collection
    match /events/{eventId} {
      allow read: if true;
      allow create, update: if isFaculty();
      allow delete: if isFaculty();
    }

    // Clubs Collection
    match /clubs/{clubId} {
      allow read: if true;
      allow create, delete: if isFaculty();
      // Allow faculty to update anything.
      // Allow a club lead to update specific fields of their own club.
      // This rule ensures that every key in the request is one of the allowed keys.
      allow update: if isFaculty() || (
        isAuthenticated() &&
        resource.data.leadId == request.auth.uid &&
        request.resource.data.keys().hasOnly(['name', 'description', 'image', 'socialLinks', 'gallery', 'googleDriveFolderId', 'updatedAt'])
      );
    }

    // Event Requests collection
    match /eventRequests/{requestId} {
      // Allow read only by the user who created it, or a listed faculty advisor.
      allow read: if isAuthenticated() && (isOwner(resource.data.createdBy) || (isFaculty() && request.auth.uid in resource.data.facultyAdvisorIds));
      allow create: if isAuthenticated();
      // Allow update if user is faculty, OR if they are the owner and only changing specific fields.
      allow update: if (
        isAuthenticated() &&
        (
          isFaculty() || (
            resource.data.createdBy == request.auth.uid &&
            request.resource.data.keys().hasOnly([
              'title', 'description', 'whatYouWillLearn', 'targetAudience',
              'keySpeakers', 'equipmentNeeds', 'budgetDetails', 'location',
              'category', 'registrationLink', 'clubId', 'clubName', 'date',
              'time', 'endTime', 'headerImage', 'eventLogo', 'googleDriveFolderId',
              'photoAlbumUrl', 'tags', 'allowExternals', 'status', 'updatedAt', 'facultyAdvisorIds'
            ])
          )
        )
      );
      allow delete: if false;
    }
    
    // Timetables collection
    match /timetables/{timetableId} {
      allow read: if isAuthenticated();
      allow write: if isFaculty();
    }

    // Seminar Bookings collection
    match /seminarBookings/{bookingId} {
      allow read: if isAuthenticated();
      allow write: if isFaculty();
    }
    
    // Faculty Invitations Collection
    match /facultyInvitations/{inviteId} {
      allow read: if true;
      // Allow faculty to create invitations with all necessary fields
      allow create: if isFaculty() && 
                   request.resource.data.keys().hasOnly(['name', 'email', 'token', 'role', 'expiresAt', 'createdAt', 'used']);
      // Allow anyone to update an invitation ONLY to mark it as used.
      allow update: if request.resource.data.keys().hasOnly(['used']) && request.resource.data.used == true;
    }
  }
}

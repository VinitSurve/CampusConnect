
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAdmin() {
      return request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isFaculty() {
      return request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'faculty';
    }

    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Main Collections
    
    // Users Collection
    match /users/{userId} {
      allow read: if true;
      // Allow user creation for anyone, as it's protected by Firebase Auth.
      // This is necessary for the faculty invitation flow to work.
      allow create: if true;
      // Allow update if the user is the owner and is NOT trying to change their role,
      // OR if the user is faculty/admin.
      allow update: if (isOwner(userId) && !(request.resource.data.role != resource.data.role)) || isFaculty() || isAdmin();
      allow delete: if isAdmin();
    }

    // Events Collection
    match /events/{eventId} {
      allow read: if true;
      allow create, update: if isFaculty();
      allow delete: if isFaculty();
    }

    // Clubs Collection
    match /clubs/{clubId} {
      allow read: if true;
      allow create, delete: if isFaculty();
      // Allow faculty to update anything.
      // Allow a club lead to update specific fields of their own club.
      allow update: if isFaculty() || (
        isAuthenticated() &&
        resource.data.leadId == request.auth.uid &&
        request.resource.data.keys().hasOnly(['name', 'description', 'image', 'tags', 'contactEmail', 'facultyAdvisor', 'leadId', 'updatedAt', 'whatsAppGroupLink', 'socialLinks'])
      );
    }


    // Event Requests collection
    match /eventRequests/{requestId} {
      allow read: if true;
      allow create: if isAuthenticated();
      // Allow faculty to update anything.
      // Students can only update specific, safe fields on their own requests.
      allow update: if isAuthenticated() && (isFaculty() || (
          resource.data.createdBy == request.auth.uid &&
          request.resource.data.keys().hasOnly([
            'title', 'description', 'location', 'category', 'registrationLink', 
            'clubId', 'clubName', 'date', 'time', 'endTime', 'status', 'updatedAt', 
            'targetAudience', 'keySpeakers', 'equipmentNeeds', 'budgetDetails', 
            'whatYouWillLearn', 'headerImage', 'eventLogo', 'googleDriveFolderId', 
            'photoAlbumUrl', 'tags', 'allowExternals', 'gallery'
          ])
        )
      );
      allow delete: if false; // Requests should be rejected, not deleted.
    }
    
    // Timetables collection
    match /timetables/{timetableId} {
      allow read: if isAuthenticated();
      allow write: if isFaculty();
    }

    // Seminar Bookings collection
    match /seminarBookings/{bookingId} {
      allow read: if isAuthenticated();
      allow write: if isFaculty();
    }

    // Faculty Invitations collection
    match /facultyInvitations/{inviteId} {
        allow read: if true;
        allow create: if isFaculty();
        // Allow anyone to update an invitation ONLY to mark it as used.
        // This is safe because the client code checks if it's already used,
        // and no other fields can be changed.
        allow update: if request.resource.data.keys().hasOnly(['used']) && request.resource.data.used == true;
    }
  }
}
